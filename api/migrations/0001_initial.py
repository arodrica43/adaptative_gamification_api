# Generated by Django 3.0.8 on 2020-07-27 16:20

import api.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import enumfields.fields
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmotionProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valence', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('arousal', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='Gamer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('emotion_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.EmotionProfile')),
            ],
        ),
        migrations.CreateModel(
            name='GamerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disruptor', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('free_spirit', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('achiever', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('player', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('socializer', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('philantropist', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('no_player', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('data', jsonfield.fields.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='GMechanic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('html', models.TextField()),
                ('mechanic_type', enumfields.fields.EnumField(default='Unknown', enum=api.models.GMechanic.MechanicType, max_length=11)),
            ],
        ),
        migrations.CreateModel(
            name='InteractionStatistic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_index', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('mechanic', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='api.GMechanic')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.Gamer')),
            ],
        ),
        migrations.CreateModel(
            name='GComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(max_length=2000)),
                ('component_type', enumfields.fields.EnumField(enum=api.models.GComponent.ComponentType, max_length=7)),
                ('interacting_users', models.ManyToManyField(to='api.Gamer')),
                ('mechanics', models.ManyToManyField(to='api.GMechanic')),
            ],
        ),
        migrations.AddField(
            model_name='gamer',
            name='gamer_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.GamerProfile'),
        ),
        migrations.CreateModel(
            name='Unlockable',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='SocialStatus',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='SocialNetwork',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='Lottery',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='KnowledgeShare',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='KnowledgeGift',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='EasterEgg',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='DevelopmentTool',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('gmechanic_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.GMechanic')),
                ('length', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('sort_by', models.CharField(default='', max_length=100)),
                ('users', models.ManyToManyField(to='api.Gamer')),
            ],
            bases=('api.gmechanic',),
        ),
    ]
